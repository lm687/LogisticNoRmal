#' Inverse ALR for a vector
#' #' @param v a compositional vector (sum_i(v_i)=1)
inverse_alr_vec <- function(v){
## v is a vector
exp_v = exp(v)
return(exp(v)/sum(exp_v))
}
inverse_alr_vec(c(0.3, 0.2, 0.5))
inverse_alr_vec(c(2, 4, 1))
sum(inverse_alr_vec(c(2, 4, 1)))
#' Inverse ALR for a matrix
#' #' @param m a matric in which rows are compositional vectors (rowSums(m_i) for all rows i)
inverse_alr_mat <- function(m){
return(apply(m, 1, inverse_alr_vec))
}
MCMCpack::rdirichlet(1000, rep(1, 5))
compositions::alr(MCMCpack::rdirichlet(1000, rep(1, 5)))
as(compositions::alr(MCMCpack::rdirichlet(1000, rep(1, 5))), 'matrix')
inverse_alr_mat(as(compositions::alr(MCMCpack::rdirichlet(1000, rep(1, 5))), 'matrix'))
#' Inverse ALR for a matrix
#' #' @param m a matric in which rows are compositional vectors (rowSums(m_i) for all rows i)
inverse_alr_mat <- function(m){
return(t(apply(m, 1, inverse_alr_vec)))
}
inverse_alr_mat(as(compositions::alr(MCMCpack::rdirichlet(1000, rep(1, 5))), 'matrix'))
rowSums(inverse_alr_mat(as(compositions::alr(MCMCpack::rdirichlet(1000, rep(1, 5))), 'matrix')))
#' ALR (additive log-ratio) transformation
#' @param v a compositional vector (sum_i(v_i)=1)
#' @param idx index of the part of the composition which is used as baseline.
alr_vec <- function(v, idx=length(v)){
return(log(v/v[idx]))
}
#' ALR (additive log-ratio) transformation of a matrix
#' @param m a matrix in which rows are compositional vectors (rowSums(m_i) for all rows i)
#' @param idx index of the part of the composition which is used as baseline.
alr_mat <- function(m, idx=length(v)){
return(sweep(m, 1, m[,idx], '/'))
}
alr_mat(MCMCpack::rdirichlet(1000, rep(1, 5)))
#' ALR (additive log-ratio) transformation of a matrix
#' @param m a matrix in which rows are compositional vectors (rowSums(m_i) for all rows i)
#' @param idx index of the part of the composition which is used as baseline.
alr_mat <- function(m, idx=ncol(m)){
return(sweep(m, 1, m[,idx], '/'))
}
alr_mat(MCMCpack::rdirichlet(1000, rep(1, 5)))
inverse_alr_vec(c(4, 0.5, 1))
#' Inverse ALR for a vector
#' @param v a compositional vector (sum_i(v_i)=1)
#' @examples inverse_alr_vec(c(4, 0.5, 1))
#'
inverse_alr_vec <- function(v){
## v is a vector
exp_v = exp(v)
return(exp(v)/sum(exp_v))
}
#' Inverse ALR for a matrix
#' @param m a matrix in which rows are compositional vectors (rowSums(m_i) for all rows i)
inverse_alr_mat <- function(m){
return(t(apply(m, 1, inverse_alr_vec)))
}
#' ALR (additive log-ratio) transformation
#' @param v a compositional vector (sum_i(v_i)=1)
#' @param idx index of the part of the composition which is used as baseline.
#' @examples alr_vec(c(0.2, 0.5, 0.3))
alr_vec <- function(v, idx=length(v)){
return(log(v/v[idx]))
}
#' ALR (additive log-ratio) transformation of a matrix
#' @param m a matrix in which rows are compositional vectors (rowSums(m_i) for all rows i)
#' @param idx index of the part of the composition which is used as baseline.
alr_mat <- function(m, idx=ncol(m)){
return(sweep(m, 1, m[,idx], '/'))
}
#' Fit compositional data on a logistic normal model
#' @param x a matrix of compositional instances in a shape of a matrix in which rows are compositional vectors (rowSums(m_i) for all rows i)
fit_logistic_normal <- function(x){
alr_x = alr_mat(x)
mu = colMeans(alr_x)
covar = cov(t(alr_x))
}
inverse_alr_vec(c(4, 0.5, 1))
MCMCpack::rdirichlet(1000, rep(1, 5))
library(LogisticNoRmal)
library(LogisticNoRmal, lib.loc = "~/Documents/PhD/other_repos")
library(LogisticNoRmal)
library(LogisticNoRmal, lib.loc = "~/Documents/PhD/other_repos")
library(compositions)
library(LogisticNoRmal, lib.loc = "~/Documents/PhD/other_repos")
library(LogisticNoRmal, lib.loc = "~/Documents/PhD/other_repos")
X = MCMCpack::rdirichlet(1000, rep(1, 3))
plot(acomp(X))
X = MCMCpack::rdirichlet(1000, c(0.3, 0.5, 3))
plot(acomp(X))
sum(inverse_alr_vec(c(2, 4, 1)))
inverse_alr_mat
rowSums(inverse_alr_mat(as(compositions::alr(MCMCpack::rdirichlet(1000, rep(1, 5))), 'matrix')))
alr_mat(MCMCpack::rdirichlet(1000, rep(1, 5)))
fit_logistic_normal(x = X)
library(LogisticNoRmal)
library(LogisticNoRmal, lib.loc = "~/Documents/PhD/other_repos")
library(compositions)
library(LogisticNoRmal, lib.loc = "~/Documents/PhD/other_repos")
library(compositions)
We simulate data that lie on the simplex:
```{r}
X = MCMCpack::rdirichlet(1000, c(0.3, 0.5, 3))
```
```{r}
plot(acomp(X))
plot(acomp(X))
```{r}
sum(inverse_alr_vec(c(2, 4, 1)))
inverse_alr_mat
rowSums(inverse_alr_mat(as(compositions::alr(MCMCpack::rdirichlet(1000, rep(1, 5))), 'matrix')))
alr_mat(MCMCpack::rdirichlet(1000, rep(1, 5)))
```{r}
```{r}
fit_logistic_normal(x = X)
alr_mat(MCMCpack::rdirichlet(1000, rep(1, 5)))
rowSums(inverse_alr_mat(as(compositions::alr(MCMCpack::rdirichlet(1000, rep(1, 5))), 'matrix')))
fit_logistic_normal(x = X)
b = fit_logistic_normal(x = X)
b
X
alr_mat(X)
alr_x = alr_mat(X)
balr_x
alr_x
mu = colMeans(alr_x)
mu
covar = cov(t(alr_x))
covar
dim(covar)
alr_x
cov(alr_x)
library(LogisticNoRmal)
library(LogisticNoRmal, lib.loc = "~/Documents/PhD/other_repos")
library(compositions)
library(LogisticNoRmal, lib.loc = "~/Documents/PhD/other_repos")
library(compositions)
We simulate data that lie on the simplex:
```{r}
X = MCMCpack::rdirichlet(1000, c(0.3, 0.5, 3))
```
```{r}
plot(acomp(X))
plot(acomp(X))
```{r}
sum(inverse_alr_vec(c(2, 4, 1)))
inverse_alr_mat
rowSums(inverse_alr_mat(as(compositions::alr(MCMCpack::rdirichlet(1000, rep(1, 5))), 'matrix')))
alr_mat(MCMCpack::rdirichlet(1000, rep(1, 5)))
```{r}
```{r}
b = fit_logistic_normal(x = X)
alr_x = alr_mat(X)
mu = colMeans(alr_x)
b
b = fit_logistic_normal(x = X)
b
alr_x = alr_mat(X)
mu = colMeans(alr_x)
covar = cov(alr_x)
covar
library(LogisticNoRmal)
library(LogisticNoRmal, lib.loc = "~/Documents/PhD/other_repos")
library(compositions)
X = MCMCpack::rdirichlet(1000, c(0.3, 0.5, 3))
plot(acomp(X))
sum(inverse_alr_vec(c(2, 4, 1)))
inverse_alr_mat
rowSums(inverse_alr_mat(as(compositions::alr(MCMCpack::rdirichlet(1000, rep(1, 5))), 'matrix')))
alr_mat(MCMCpack::rdirichlet(1000, rep(1, 5)))
b = fit_logistic_normal(x = X)
b
fit_logistic_normal
library(LogisticNoRmal)
library(LogisticNoRmal)
fit_logistic_normal
library(LogisticNoRmal, lib.loc = "~/Documents/PhD/other_repos")
fit_logistic_normal
